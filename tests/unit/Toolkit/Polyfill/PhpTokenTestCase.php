<?php declare(strict_types=1);

namespace Salient\Tests\Polyfill;

use Salient\Polyfill\PhpToken;
use Salient\Tests\TestCase;
use Salient\Utility\Get;
use Salient\Utility\Str;
use TypeError;

abstract class PhpTokenTestCase extends TestCase
{
    private const CODE = <<<'PHP'
<div><?php
namespace Foo\Bar
{
    class A
    {
        const PUBLIC = 'public';

        /**
         * comment #1
         */
        public function f(int $a): string
        {
            // comment #2
            return \sprintf('0x%02x', $a);
        }

        // comment #3
    }
}

namespace Foo
{
    use Foo\{Bar\A as B, Bar\A as C};

    $same = [
        namespace\Bar\A::class,
        B::class,
        C::class,
    ];
    $a = new \Foo\Bar\A();
    $b = $a->f(77);
    echo "Value: {$b}";
}
?></div>
PHP;

    /** @var class-string<PhpToken|\PhpToken> */
    protected static string $Token;

    /**
     * @dataProvider getTokenNameProvider
     *
     * @param array<string|null> $expected
     * @param array<PhpToken|\PhpToken> $input
     */
    public function testGetTokenName(array $expected, array $input): void
    {
        foreach ($input as $token) {
            $actual[] = $token->getTokenName();
        }

        $actualCode = Get::code($actual ?? []);
        $this->assertSame(
            $expected,
            $actual ?? [],
            'If $input changed, replace $expected with: ' . $actualCode,
        );
    }

    /**
     * @return array<array{array<string|null>,array<PhpToken|\PhpToken>}>
     */
    public static function getTokenNameProvider(): array
    {
        return [
            [
                [
                    'T_INLINE_HTML',
                    'T_OPEN_TAG',
                    'T_NAMESPACE',
                    'T_WHITESPACE',
                    'T_NAME_QUALIFIED',
                    'T_WHITESPACE',
                    '{',
                    'T_WHITESPACE',
                    'T_CLASS',
                    'T_WHITESPACE',
                    'T_STRING',
                    'T_WHITESPACE',
                    '{',
                    'T_WHITESPACE',
                    'T_CONST',
                    'T_WHITESPACE',
                    'T_STRING',
                    'T_WHITESPACE',
                    '=',
                    'T_WHITESPACE',
                    'T_CONSTANT_ENCAPSED_STRING',
                    ';',
                    'T_WHITESPACE',
                    'T_DOC_COMMENT',
                    'T_WHITESPACE',
                    'T_PUBLIC',
                    'T_WHITESPACE',
                    'T_FUNCTION',
                    'T_WHITESPACE',
                    'T_STRING',
                    '(',
                    'T_STRING',
                    'T_WHITESPACE',
                    'T_VARIABLE',
                    ')',
                    ':',
                    'T_WHITESPACE',
                    'T_STRING',
                    'T_WHITESPACE',
                    '{',
                    'T_WHITESPACE',
                    'T_COMMENT',
                    'T_WHITESPACE',
                    'T_RETURN',
                    'T_WHITESPACE',
                    'T_NAME_FULLY_QUALIFIED',
                    '(',
                    'T_CONSTANT_ENCAPSED_STRING',
                    ',',
                    'T_WHITESPACE',
                    'T_VARIABLE',
                    ')',
                    ';',
                    'T_WHITESPACE',
                    '}',
                    'T_WHITESPACE',
                    'T_COMMENT',
                    'T_WHITESPACE',
                    '}',
                    'T_WHITESPACE',
                    '}',
                    'T_WHITESPACE',
                    'T_NAMESPACE',
                    'T_WHITESPACE',
                    'T_STRING',
                    'T_WHITESPACE',
                    '{',
                    'T_WHITESPACE',
                    'T_USE',
                    'T_WHITESPACE',
                    'T_STRING',
                    'T_NS_SEPARATOR',
                    '{',
                    'T_NAME_QUALIFIED',
                    'T_WHITESPACE',
                    'T_AS',
                    'T_WHITESPACE',
                    'T_STRING',
                    ',',
                    'T_WHITESPACE',
                    'T_NAME_QUALIFIED',
                    'T_WHITESPACE',
                    'T_AS',
                    'T_WHITESPACE',
                    'T_STRING',
                    '}',
                    ';',
                    'T_WHITESPACE',
                    'T_VARIABLE',
                    'T_WHITESPACE',
                    '=',
                    'T_WHITESPACE',
                    '[',
                    'T_WHITESPACE',
                    'T_NAME_RELATIVE',
                    'T_DOUBLE_COLON',
                    'T_STRING',
                    ',',
                    'T_WHITESPACE',
                    'T_STRING',
                    'T_DOUBLE_COLON',
                    'T_STRING',
                    ',',
                    'T_WHITESPACE',
                    'T_STRING',
                    'T_DOUBLE_COLON',
                    'T_STRING',
                    ',',
                    'T_WHITESPACE',
                    ']',
                    ';',
                    'T_WHITESPACE',
                    'T_VARIABLE',
                    'T_WHITESPACE',
                    '=',
                    'T_WHITESPACE',
                    'T_NEW',
                    'T_WHITESPACE',
                    'T_NAME_FULLY_QUALIFIED',
                    '(',
                    ')',
                    ';',
                    'T_WHITESPACE',
                    'T_VARIABLE',
                    'T_WHITESPACE',
                    '=',
                    'T_WHITESPACE',
                    'T_VARIABLE',
                    'T_OBJECT_OPERATOR',
                    'T_STRING',
                    '(',
                    'T_LNUMBER',
                    ')',
                    ';',
                    'T_WHITESPACE',
                    'T_ECHO',
                    'T_WHITESPACE',
                    '"',
                    'T_ENCAPSED_AND_WHITESPACE',
                    'T_CURLY_OPEN',
                    'T_VARIABLE',
                    '}',
                    '"',
                    ';',
                    'T_WHITESPACE',
                    '}',
                    'T_WHITESPACE',
                    'T_CLOSE_TAG',
                    'T_INLINE_HTML',
                ],
                static::$Token::tokenize(self::CODE, \TOKEN_PARSE),
            ],
            [
                [
                    null,
                ],
                [
                    new static::$Token(max(
                        10001,
                        \T_NAME_FULLY_QUALIFIED,
                        \T_NAME_RELATIVE,
                        \T_NAME_QUALIFIED,
                        \T_MATCH,
                        \T_READONLY,
                        \T_ENUM,
                        \T_PROPERTY_C,
                        \T_ATTRIBUTE,
                        \T_NULLSAFE_OBJECT_OPERATOR,
                        \T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG,
                        \T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG,
                    ) + 1, ''),
                ],
            ],
        ];
    }

    /**
     * @dataProvider isProvider
     *
     * @param bool[]|string $expected
     * @param array<PhpToken|\PhpToken> $input
     * @param int|string|array<int|string> $kind
     */
    public function testIs($expected, array $input, $kind): void
    {
        $this->maybeExpectException($expected);

        foreach ($input as $token) {
            $actual[] = $token->is($kind);
        }

        $actualCode = Get::code($actual ?? []);
        $this->assertSame(
            $expected,
            $actual ?? [],
            'If $input changed, replace $expected with: ' . $actualCode,
        );
    }

    /**
     * @return array<array{bool[]|string,array<PhpToken|\PhpToken>,mixed}>
     */
    public static function isProvider(): array
    {
        return [
            [
                [
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    true,
                    true,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    false,
                    true,
                    true,
                    false,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    true,
                    true,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    true,
                    true,
                    false,
                    false,
                    true,
                    false,
                    true,
                    true,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    false,
                    true,
                    true,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    true,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                ],
                static::$Token::tokenize(self::CODE, \TOKEN_PARSE),
                [
                    \T_WHITESPACE,
                    \T_COMMENT,
                    \T_DOC_COMMENT,
                    \T_OPEN_TAG,
                    '$a',
                ],
            ],
            [
                [
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                ],
                static::$Token::tokenize(self::CODE, \TOKEN_PARSE),
                \T_CONST,
            ],
            [
                [
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                ],
                static::$Token::tokenize(self::CODE, \TOKEN_PARSE),
                '$a',
            ],
            [
                TypeError::class,
                static::$Token::tokenize(self::CODE, \TOKEN_PARSE),
                false,
            ],
            [
                TypeError::class,
                static::$Token::tokenize(self::CODE, \TOKEN_PARSE),
                [
                    \T_OPEN_TAG,
                    '$a',
                    false,
                ],
            ],
            [
                TypeError::class,
                [
                    new static::$Token(\T_OPEN_TAG, "<?php\n"),
                    new static::$Token(\T_VARIABLE, '$a'),
                ],
                [
                    false,
                    \T_OPEN_TAG,
                    '$a',
                ],
            ],
            [
                [
                    true,
                    true,
                ],
                [
                    new static::$Token(\T_OPEN_TAG, "<?php\n"),
                    new static::$Token(\T_VARIABLE, '$a'),
                ],
                [
                    \T_OPEN_TAG,
                    '$a',
                    false,
                ],
            ],
        ];
    }

    /**
     * @dataProvider isIgnorableProvider
     *
     * @param bool[] $expected
     * @param array<PhpToken|\PhpToken> $input
     */
    public function testIsIgnorable(array $expected, array $input): void
    {
        foreach ($input as $token) {
            $actual[] = $token->isIgnorable();
        }

        $actualCode = Get::code($actual ?? []);
        $this->assertSame(
            $expected,
            $actual ?? [],
            'If $input changed, replace $expected with: ' . $actualCode,
        );
    }

    /**
     * @return array<array{bool[],array<PhpToken|\PhpToken>}>
     */
    public static function isIgnorableProvider(): array
    {
        return [
            [
                [
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    true,
                    true,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    false,
                    true,
                    false,
                    false,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    true,
                    true,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    false,
                    false,
                    true,
                    false,
                    true,
                    true,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    true,
                    false,
                    false,
                ],
                static::$Token::tokenize(self::CODE, \TOKEN_PARSE),
            ],
        ];
    }

    public function testToString(): void
    {
        $code = '';
        foreach (static::$Token::tokenize(self::CODE, \TOKEN_PARSE) as $token) {
            $code .= (string) $token;
        }
        $this->assertSame(self::CODE, $code);
    }

    /**
     * @dataProvider tokenizeProvider
     *
     * @param array<PhpToken|\PhpToken> $expected
     */
    public function testTokenize(array $expected, string $input, int $flags = 0): void
    {
        $actual = static::$Token::tokenize(Str::setEol($input), $flags);

        $actualCode = array_reduce(
            $actual,
            fn($code, $token) => $code . sprintf(
                "    new static::\$Token(%s, %s, %d, %d),\n",
                $token->id < 256 ? $token->id : '\\' . $token->getTokenName(),
                Get::code($token->text),
                $token->line,
                $token->pos,
            ),
            "[\n"
        ) . ']';
        $this->assertEquals(
            $expected,
            $actual,
            'If $input changed, replace $expected with: ' . $actualCode,
        );
    }

    /**
     * @return array<array{array<PhpToken|\PhpToken>,string,2?:int}>
     */
    public static function tokenizeProvider(): array
    {
        return [
            'with TOKEN_PARSE' => [
                [
                    new static::$Token(\T_INLINE_HTML, '<div>', 1, 0),
                    new static::$Token(\T_OPEN_TAG, "<?php\n", 1, 5),
                    new static::$Token(\T_NAMESPACE, 'namespace', 2, 11),
                    new static::$Token(\T_WHITESPACE, ' ', 2, 20),
                    new static::$Token(\T_NAME_QUALIFIED, 'Foo\Bar', 2, 21),
                    new static::$Token(\T_WHITESPACE, "\n", 2, 28),
                    new static::$Token(123, '{', 3, 29),
                    new static::$Token(\T_WHITESPACE, "\n    ", 3, 30),
                    new static::$Token(\T_CLASS, 'class', 4, 35),
                    new static::$Token(\T_WHITESPACE, ' ', 4, 40),
                    new static::$Token(\T_STRING, 'A', 4, 41),
                    new static::$Token(\T_WHITESPACE, "\n    ", 4, 42),
                    new static::$Token(123, '{', 5, 47),
                    new static::$Token(\T_WHITESPACE, "\n        ", 5, 48),
                    new static::$Token(\T_CONST, 'const', 6, 57),
                    new static::$Token(\T_WHITESPACE, ' ', 6, 62),
                    new static::$Token(\T_STRING, 'PUBLIC', 6, 63),
                    new static::$Token(\T_WHITESPACE, ' ', 6, 69),
                    new static::$Token(61, '=', 6, 70),
                    new static::$Token(\T_WHITESPACE, ' ', 6, 71),
                    new static::$Token(\T_CONSTANT_ENCAPSED_STRING, "'public'", 6, 72),
                    new static::$Token(59, ';', 6, 80),
                    new static::$Token(\T_WHITESPACE, "\n\n        ", 6, 81),
                    new static::$Token(\T_DOC_COMMENT, "/**\n         * comment #1\n         */", 8, 91),
                    new static::$Token(\T_WHITESPACE, "\n        ", 10, 128),
                    new static::$Token(\T_PUBLIC, 'public', 11, 137),
                    new static::$Token(\T_WHITESPACE, ' ', 11, 143),
                    new static::$Token(\T_FUNCTION, 'function', 11, 144),
                    new static::$Token(\T_WHITESPACE, ' ', 11, 152),
                    new static::$Token(\T_STRING, 'f', 11, 153),
                    new static::$Token(40, '(', 11, 154),
                    new static::$Token(\T_STRING, 'int', 11, 155),
                    new static::$Token(\T_WHITESPACE, ' ', 11, 158),
                    new static::$Token(\T_VARIABLE, '$a', 11, 159),
                    new static::$Token(41, ')', 11, 161),
                    new static::$Token(58, ':', 11, 162),
                    new static::$Token(\T_WHITESPACE, ' ', 11, 163),
                    new static::$Token(\T_STRING, 'string', 11, 164),
                    new static::$Token(\T_WHITESPACE, "\n        ", 11, 170),
                    new static::$Token(123, '{', 12, 179),
                    new static::$Token(\T_WHITESPACE, "\n            ", 12, 180),
                    new static::$Token(\T_COMMENT, '// comment #2', 13, 193),
                    new static::$Token(\T_WHITESPACE, "\n            ", 13, 206),
                    new static::$Token(\T_RETURN, 'return', 14, 219),
                    new static::$Token(\T_WHITESPACE, ' ', 14, 225),
                    new static::$Token(\T_NAME_FULLY_QUALIFIED, '\sprintf', 14, 226),
                    new static::$Token(40, '(', 14, 234),
                    new static::$Token(\T_CONSTANT_ENCAPSED_STRING, "'0x%02x'", 14, 235),
                    new static::$Token(44, ',', 14, 243),
                    new static::$Token(\T_WHITESPACE, ' ', 14, 244),
                    new static::$Token(\T_VARIABLE, '$a', 14, 245),
                    new static::$Token(41, ')', 14, 247),
                    new static::$Token(59, ';', 14, 248),
                    new static::$Token(\T_WHITESPACE, "\n        ", 14, 249),
                    new static::$Token(125, '}', 15, 258),
                    new static::$Token(\T_WHITESPACE, "\n\n        ", 15, 259),
                    new static::$Token(\T_COMMENT, '// comment #3', 17, 269),
                    new static::$Token(\T_WHITESPACE, "\n    ", 17, 282),
                    new static::$Token(125, '}', 18, 287),
                    new static::$Token(\T_WHITESPACE, "\n", 18, 288),
                    new static::$Token(125, '}', 19, 289),
                    new static::$Token(\T_WHITESPACE, "\n\n", 19, 290),
                    new static::$Token(\T_NAMESPACE, 'namespace', 21, 292),
                    new static::$Token(\T_WHITESPACE, ' ', 21, 301),
                    new static::$Token(\T_STRING, 'Foo', 21, 302),
                    new static::$Token(\T_WHITESPACE, "\n", 21, 305),
                    new static::$Token(123, '{', 22, 306),
                    new static::$Token(\T_WHITESPACE, "\n    ", 22, 307),
                    new static::$Token(\T_USE, 'use', 23, 312),
                    new static::$Token(\T_WHITESPACE, ' ', 23, 315),
                    new static::$Token(\T_STRING, 'Foo', 23, 316),
                    new static::$Token(\T_NS_SEPARATOR, '\\', 23, 319),
                    new static::$Token(123, '{', 23, 320),
                    new static::$Token(\T_NAME_QUALIFIED, 'Bar\A', 23, 321),
                    new static::$Token(\T_WHITESPACE, ' ', 23, 326),
                    new static::$Token(\T_AS, 'as', 23, 327),
                    new static::$Token(\T_WHITESPACE, ' ', 23, 329),
                    new static::$Token(\T_STRING, 'B', 23, 330),
                    new static::$Token(44, ',', 23, 331),
                    new static::$Token(\T_WHITESPACE, ' ', 23, 332),
                    new static::$Token(\T_NAME_QUALIFIED, 'Bar\A', 23, 333),
                    new static::$Token(\T_WHITESPACE, ' ', 23, 338),
                    new static::$Token(\T_AS, 'as', 23, 339),
                    new static::$Token(\T_WHITESPACE, ' ', 23, 341),
                    new static::$Token(\T_STRING, 'C', 23, 342),
                    new static::$Token(125, '}', 23, 343),
                    new static::$Token(59, ';', 23, 344),
                    new static::$Token(\T_WHITESPACE, "\n\n    ", 23, 345),
                    new static::$Token(\T_VARIABLE, '$same', 25, 351),
                    new static::$Token(\T_WHITESPACE, ' ', 25, 356),
                    new static::$Token(61, '=', 25, 357),
                    new static::$Token(\T_WHITESPACE, ' ', 25, 358),
                    new static::$Token(91, '[', 25, 359),
                    new static::$Token(\T_WHITESPACE, "\n        ", 25, 360),
                    new static::$Token(\T_NAME_RELATIVE, 'namespace\Bar\A', 26, 369),
                    new static::$Token(\T_DOUBLE_COLON, '::', 26, 384),
                    new static::$Token(\T_STRING, 'class', 26, 386),
                    new static::$Token(44, ',', 26, 391),
                    new static::$Token(\T_WHITESPACE, "\n        ", 26, 392),
                    new static::$Token(\T_STRING, 'B', 27, 401),
                    new static::$Token(\T_DOUBLE_COLON, '::', 27, 402),
                    new static::$Token(\T_STRING, 'class', 27, 404),
                    new static::$Token(44, ',', 27, 409),
                    new static::$Token(\T_WHITESPACE, "\n        ", 27, 410),
                    new static::$Token(\T_STRING, 'C', 28, 419),
                    new static::$Token(\T_DOUBLE_COLON, '::', 28, 420),
                    new static::$Token(\T_STRING, 'class', 28, 422),
                    new static::$Token(44, ',', 28, 427),
                    new static::$Token(\T_WHITESPACE, "\n    ", 28, 428),
                    new static::$Token(93, ']', 29, 433),
                    new static::$Token(59, ';', 29, 434),
                    new static::$Token(\T_WHITESPACE, "\n    ", 29, 435),
                    new static::$Token(\T_VARIABLE, '$a', 30, 440),
                    new static::$Token(\T_WHITESPACE, ' ', 30, 442),
                    new static::$Token(61, '=', 30, 443),
                    new static::$Token(\T_WHITESPACE, ' ', 30, 444),
                    new static::$Token(\T_NEW, 'new', 30, 445),
                    new static::$Token(\T_WHITESPACE, ' ', 30, 448),
                    new static::$Token(\T_NAME_FULLY_QUALIFIED, '\Foo\Bar\A', 30, 449),
                    new static::$Token(40, '(', 30, 459),
                    new static::$Token(41, ')', 30, 460),
                    new static::$Token(59, ';', 30, 461),
                    new static::$Token(\T_WHITESPACE, "\n    ", 30, 462),
                    new static::$Token(\T_VARIABLE, '$b', 31, 467),
                    new static::$Token(\T_WHITESPACE, ' ', 31, 469),
                    new static::$Token(61, '=', 31, 470),
                    new static::$Token(\T_WHITESPACE, ' ', 31, 471),
                    new static::$Token(\T_VARIABLE, '$a', 31, 472),
                    new static::$Token(\T_OBJECT_OPERATOR, '->', 31, 474),
                    new static::$Token(\T_STRING, 'f', 31, 476),
                    new static::$Token(40, '(', 31, 477),
                    new static::$Token(\T_LNUMBER, '77', 31, 478),
                    new static::$Token(41, ')', 31, 480),
                    new static::$Token(59, ';', 31, 481),
                    new static::$Token(\T_WHITESPACE, "\n    ", 31, 482),
                    new static::$Token(\T_ECHO, 'echo', 32, 487),
                    new static::$Token(\T_WHITESPACE, ' ', 32, 491),
                    new static::$Token(34, '"', 32, 492),
                    new static::$Token(\T_ENCAPSED_AND_WHITESPACE, 'Value: ', 32, 493),
                    new static::$Token(\T_CURLY_OPEN, '{', 32, 500),
                    new static::$Token(\T_VARIABLE, '$b', 32, 501),
                    new static::$Token(125, '}', 32, 503),
                    new static::$Token(34, '"', 32, 504),
                    new static::$Token(59, ';', 32, 505),
                    new static::$Token(\T_WHITESPACE, "\n", 32, 506),
                    new static::$Token(125, '}', 33, 507),
                    new static::$Token(\T_WHITESPACE, "\n", 33, 508),
                    new static::$Token(\T_CLOSE_TAG, '?>', 34, 509),
                    new static::$Token(\T_INLINE_HTML, '</div>', 34, 511),
                ],
                self::CODE,
                \TOKEN_PARSE,
            ],
            'without TOKEN_PARSE' => [
                [
                    new static::$Token(\T_INLINE_HTML, '<div>', 1, 0),
                    new static::$Token(\T_OPEN_TAG, "<?php\n", 1, 5),
                    new static::$Token(\T_NAMESPACE, 'namespace', 2, 11),
                    new static::$Token(\T_WHITESPACE, ' ', 2, 20),
                    new static::$Token(\T_NAME_QUALIFIED, 'Foo\Bar', 2, 21),
                    new static::$Token(\T_WHITESPACE, "\n", 2, 28),
                    new static::$Token(123, '{', 3, 29),
                    new static::$Token(\T_WHITESPACE, "\n    ", 3, 30),
                    new static::$Token(\T_CLASS, 'class', 4, 35),
                    new static::$Token(\T_WHITESPACE, ' ', 4, 40),
                    new static::$Token(\T_STRING, 'A', 4, 41),
                    new static::$Token(\T_WHITESPACE, "\n    ", 4, 42),
                    new static::$Token(123, '{', 5, 47),
                    new static::$Token(\T_WHITESPACE, "\n        ", 5, 48),
                    new static::$Token(\T_CONST, 'const', 6, 57),
                    new static::$Token(\T_WHITESPACE, ' ', 6, 62),
                    new static::$Token(\T_PUBLIC, 'PUBLIC', 6, 63),
                    new static::$Token(\T_WHITESPACE, ' ', 6, 69),
                    new static::$Token(61, '=', 6, 70),
                    new static::$Token(\T_WHITESPACE, ' ', 6, 71),
                    new static::$Token(\T_CONSTANT_ENCAPSED_STRING, "'public'", 6, 72),
                    new static::$Token(59, ';', 6, 80),
                    new static::$Token(\T_WHITESPACE, "\n\n        ", 6, 81),
                    new static::$Token(\T_DOC_COMMENT, "/**\n         * comment #1\n         */", 8, 91),
                    new static::$Token(\T_WHITESPACE, "\n        ", 10, 128),
                    new static::$Token(\T_PUBLIC, 'public', 11, 137),
                    new static::$Token(\T_WHITESPACE, ' ', 11, 143),
                    new static::$Token(\T_FUNCTION, 'function', 11, 144),
                    new static::$Token(\T_WHITESPACE, ' ', 11, 152),
                    new static::$Token(\T_STRING, 'f', 11, 153),
                    new static::$Token(40, '(', 11, 154),
                    new static::$Token(\T_STRING, 'int', 11, 155),
                    new static::$Token(\T_WHITESPACE, ' ', 11, 158),
                    new static::$Token(\T_VARIABLE, '$a', 11, 159),
                    new static::$Token(41, ')', 11, 161),
                    new static::$Token(58, ':', 11, 162),
                    new static::$Token(\T_WHITESPACE, ' ', 11, 163),
                    new static::$Token(\T_STRING, 'string', 11, 164),
                    new static::$Token(\T_WHITESPACE, "\n        ", 11, 170),
                    new static::$Token(123, '{', 12, 179),
                    new static::$Token(\T_WHITESPACE, "\n            ", 12, 180),
                    new static::$Token(\T_COMMENT, '// comment #2', 13, 193),
                    new static::$Token(\T_WHITESPACE, "\n            ", 13, 206),
                    new static::$Token(\T_RETURN, 'return', 14, 219),
                    new static::$Token(\T_WHITESPACE, ' ', 14, 225),
                    new static::$Token(\T_NAME_FULLY_QUALIFIED, '\sprintf', 14, 226),
                    new static::$Token(40, '(', 14, 234),
                    new static::$Token(\T_CONSTANT_ENCAPSED_STRING, "'0x%02x'", 14, 235),
                    new static::$Token(44, ',', 14, 243),
                    new static::$Token(\T_WHITESPACE, ' ', 14, 244),
                    new static::$Token(\T_VARIABLE, '$a', 14, 245),
                    new static::$Token(41, ')', 14, 247),
                    new static::$Token(59, ';', 14, 248),
                    new static::$Token(\T_WHITESPACE, "\n        ", 14, 249),
                    new static::$Token(125, '}', 15, 258),
                    new static::$Token(\T_WHITESPACE, "\n\n        ", 15, 259),
                    new static::$Token(\T_COMMENT, '// comment #3', 17, 269),
                    new static::$Token(\T_WHITESPACE, "\n    ", 17, 282),
                    new static::$Token(125, '}', 18, 287),
                    new static::$Token(\T_WHITESPACE, "\n", 18, 288),
                    new static::$Token(125, '}', 19, 289),
                    new static::$Token(\T_WHITESPACE, "\n\n", 19, 290),
                    new static::$Token(\T_NAMESPACE, 'namespace', 21, 292),
                    new static::$Token(\T_WHITESPACE, ' ', 21, 301),
                    new static::$Token(\T_STRING, 'Foo', 21, 302),
                    new static::$Token(\T_WHITESPACE, "\n", 21, 305),
                    new static::$Token(123, '{', 22, 306),
                    new static::$Token(\T_WHITESPACE, "\n    ", 22, 307),
                    new static::$Token(\T_USE, 'use', 23, 312),
                    new static::$Token(\T_WHITESPACE, ' ', 23, 315),
                    new static::$Token(\T_STRING, 'Foo', 23, 316),
                    new static::$Token(\T_NS_SEPARATOR, '\\', 23, 319),
                    new static::$Token(123, '{', 23, 320),
                    new static::$Token(\T_NAME_QUALIFIED, 'Bar\A', 23, 321),
                    new static::$Token(\T_WHITESPACE, ' ', 23, 326),
                    new static::$Token(\T_AS, 'as', 23, 327),
                    new static::$Token(\T_WHITESPACE, ' ', 23, 329),
                    new static::$Token(\T_STRING, 'B', 23, 330),
                    new static::$Token(44, ',', 23, 331),
                    new static::$Token(\T_WHITESPACE, ' ', 23, 332),
                    new static::$Token(\T_NAME_QUALIFIED, 'Bar\A', 23, 333),
                    new static::$Token(\T_WHITESPACE, ' ', 23, 338),
                    new static::$Token(\T_AS, 'as', 23, 339),
                    new static::$Token(\T_WHITESPACE, ' ', 23, 341),
                    new static::$Token(\T_STRING, 'C', 23, 342),
                    new static::$Token(125, '}', 23, 343),
                    new static::$Token(59, ';', 23, 344),
                    new static::$Token(\T_WHITESPACE, "\n\n    ", 23, 345),
                    new static::$Token(\T_VARIABLE, '$same', 25, 351),
                    new static::$Token(\T_WHITESPACE, ' ', 25, 356),
                    new static::$Token(61, '=', 25, 357),
                    new static::$Token(\T_WHITESPACE, ' ', 25, 358),
                    new static::$Token(91, '[', 25, 359),
                    new static::$Token(\T_WHITESPACE, "\n        ", 25, 360),
                    new static::$Token(\T_NAME_RELATIVE, 'namespace\Bar\A', 26, 369),
                    new static::$Token(\T_DOUBLE_COLON, '::', 26, 384),
                    new static::$Token(\T_CLASS, 'class', 26, 386),
                    new static::$Token(44, ',', 26, 391),
                    new static::$Token(\T_WHITESPACE, "\n        ", 26, 392),
                    new static::$Token(\T_STRING, 'B', 27, 401),
                    new static::$Token(\T_DOUBLE_COLON, '::', 27, 402),
                    new static::$Token(\T_CLASS, 'class', 27, 404),
                    new static::$Token(44, ',', 27, 409),
                    new static::$Token(\T_WHITESPACE, "\n        ", 27, 410),
                    new static::$Token(\T_STRING, 'C', 28, 419),
                    new static::$Token(\T_DOUBLE_COLON, '::', 28, 420),
                    new static::$Token(\T_CLASS, 'class', 28, 422),
                    new static::$Token(44, ',', 28, 427),
                    new static::$Token(\T_WHITESPACE, "\n    ", 28, 428),
                    new static::$Token(93, ']', 29, 433),
                    new static::$Token(59, ';', 29, 434),
                    new static::$Token(\T_WHITESPACE, "\n    ", 29, 435),
                    new static::$Token(\T_VARIABLE, '$a', 30, 440),
                    new static::$Token(\T_WHITESPACE, ' ', 30, 442),
                    new static::$Token(61, '=', 30, 443),
                    new static::$Token(\T_WHITESPACE, ' ', 30, 444),
                    new static::$Token(\T_NEW, 'new', 30, 445),
                    new static::$Token(\T_WHITESPACE, ' ', 30, 448),
                    new static::$Token(\T_NAME_FULLY_QUALIFIED, '\Foo\Bar\A', 30, 449),
                    new static::$Token(40, '(', 30, 459),
                    new static::$Token(41, ')', 30, 460),
                    new static::$Token(59, ';', 30, 461),
                    new static::$Token(\T_WHITESPACE, "\n    ", 30, 462),
                    new static::$Token(\T_VARIABLE, '$b', 31, 467),
                    new static::$Token(\T_WHITESPACE, ' ', 31, 469),
                    new static::$Token(61, '=', 31, 470),
                    new static::$Token(\T_WHITESPACE, ' ', 31, 471),
                    new static::$Token(\T_VARIABLE, '$a', 31, 472),
                    new static::$Token(\T_OBJECT_OPERATOR, '->', 31, 474),
                    new static::$Token(\T_STRING, 'f', 31, 476),
                    new static::$Token(40, '(', 31, 477),
                    new static::$Token(\T_LNUMBER, '77', 31, 478),
                    new static::$Token(41, ')', 31, 480),
                    new static::$Token(59, ';', 31, 481),
                    new static::$Token(\T_WHITESPACE, "\n    ", 31, 482),
                    new static::$Token(\T_ECHO, 'echo', 32, 487),
                    new static::$Token(\T_WHITESPACE, ' ', 32, 491),
                    new static::$Token(34, '"', 32, 492),
                    new static::$Token(\T_ENCAPSED_AND_WHITESPACE, 'Value: ', 32, 493),
                    new static::$Token(\T_CURLY_OPEN, '{', 32, 500),
                    new static::$Token(\T_VARIABLE, '$b', 32, 501),
                    new static::$Token(125, '}', 32, 503),
                    new static::$Token(34, '"', 32, 504),
                    new static::$Token(59, ';', 32, 505),
                    new static::$Token(\T_WHITESPACE, "\n", 32, 506),
                    new static::$Token(125, '}', 33, 507),
                    new static::$Token(\T_WHITESPACE, "\n", 33, 508),
                    new static::$Token(\T_CLOSE_TAG, '?>', 34, 509),
                    new static::$Token(\T_INLINE_HTML, '</div>', 34, 511),
                ],
                self::CODE,
            ],
        ];
    }
}
