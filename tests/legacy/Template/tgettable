#!/usr/bin/env php
<?php

namespace Lkrms\Tests\Template;

use Salient\Contract\Core\Readable;
use Salient\Contract\Core\Writable;
use Salient\Core\Concern\HasReadableProperties;
use Salient\Core\Concern\HasWritableProperties;
use Salient\Core\Facade\Err;
use RuntimeException;
use Throwable;

require __DIR__ . '/../../vendor/autoload.php';

Err::register();

class A implements Writable, Readable
{
    use HasWritableProperties, HasReadableProperties;

    public static function getWritableProperties(): array
    {
        return ['Id', 'Name'];
    }

    protected $Id;

    protected $Name;

    protected $Unwritable = "can't change me";
}

class B extends A
{
    public static function getReadableProperties(): array
    {
        return ['*'];
    }

    protected function _GetData()
    {
        return $this->Data;
    }

    protected function _SetData($value)
    {
        $this->Data = $value;
        $this->DataModified = time();
    }

    protected function _GetMeta()
    {
        return $this->Meta;
    }

    protected function _IssetMeta()
    {
        return isset($this->Meta);
    }

    protected function _SetMeta($value)
    {
        $this->Meta = $value;
    }

    protected function _UnsetMeta()
    {
        $this->Meta = null;
    }

    private $Data = [];

    private $Meta;

    protected $DataModified;

    // @phpstan-ignore-next-line
    private $DoNotEven;
}

class C implements Readable, Writable
{
    use HasReadableProperties, HasWritableProperties;

    protected $Id = 0;

    protected $Name = 'Hidden';
}

$exceptions = [];

$a = new A();
$a->Id = 1;
$a->Name = 'Test entry';

$b = new B();
$b->Id = 2;
$b->Name = 'Another test entry';
$b->Data = [3, 4, 5];

$c = new C();

$b_id = $b->Id;
$b_name = $b->Name;
$b_data = $b->Data;
// @phpstan-ignore-next-line
$b_data_modified = $b->DataModified;

// @phpstan-ignore-next-line
$b_meta1 = [$b->Meta, 'isset' => isset($b->Meta), 'exists' => property_exists($b, 'Meta')];
// @phpstan-ignore-next-line
$b->Meta = [];
$b_meta2 = [$b->Meta, 'isset' => isset($b->Meta), 'exists' => property_exists($b, 'Meta')];
unset($b->Meta);
// @phpstan-ignore-next-line
$b_meta3 = [$b->Meta, 'isset' => isset($b->Meta), 'exists' => property_exists($b, 'Meta')];

try {
    $a_id = $a->Id;
    throw new RuntimeException('Reading from $a->Id was allowed');
} catch (Throwable $ex) {
    $exceptions[] = $ex;
}

try {
    // @phpstan-ignore-next-line
    $a->Unwritable = 'ok';
    throw new RuntimeException('Writing to $a->Unwritable was allowed');
} catch (RuntimeException $ex) {
    $exceptions[] = $ex;
}

try {
    // @phpstan-ignore-next-line
    $b->DoNotEven = 'ok';
    throw new RuntimeException('Writing to $b->DoNotEven was allowed');
} catch (RuntimeException $ex) {
    $exceptions[] = $ex;
}

try {
    // @phpstan-ignore-next-line
    $id = $c->Id;
    throw new RuntimeException('Reading from $c->Id was allowed');
} catch (RuntimeException $ex) {
    $exceptions[] = $ex;
}

try {
    // @phpstan-ignore-next-line
    $c->Id = 3;
    throw new RuntimeException('Writing to $c->Id was allowed');
} catch (RuntimeException $ex) {
    $exceptions[] = $ex;
}

try {
    // @phpstan-ignore-next-line
    isset($b->Data);
    // @phpstan-ignore-next-line
} catch (RuntimeException $ex) {
    $exceptions[] = $ex;
}

print_r([
    'a_set' => $a,
    'b_set' => $b,
    'c_set' => $c,
    'b_get' => [
        'id' => $b_id,
        'name' => $b_name,
        'data' => $b_data,
        'data_modified' => $b_data_modified,
        'b_meta1' => $b_meta1,
        'b_meta2' => $b_meta2,
        'b_meta3' => $b_meta3,
    ],
    'exceptions' => array_map(function (Throwable $ex) { return $ex->getMessage(); }, $exceptions)
]);
